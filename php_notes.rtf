#############################################################################################################################################

HTML 

SKELETON:

<!DOCTYPE html>
<html>
	<head>
		<meta charset="UTF-8">
		<title>title</title>
	<link rel="stylesheet" href="stylesheet.css">
	</head>
	<body>

	</body>
</html>

#############################################################################################################################################

PHP:

SKELETON:

#!/usr/bin/php
<?php 
// Your code here;
?>

• newline can be added like this: echo "Hello World" . PHP_EOL;

• variable inside a variable:
	#!/usr/bin/php
	<?php
	$name = "key";
	$$name = "val"; // (string "key" becomes a variable for "val")
	echo "$key\n";
	?>

	~/_PHP_piscine/Day02/ex00 % ./another_world.php
	val // (now key is val)

• Regular expressions (Regex or PCRE): *
	• preg_match("/pattern/", "subject")
			- returns 1 if pattern is found, otherwise 0
			- preg_match("/^t[oi]to$/", "lklslkdstotoaksddlkjas")
				• ^ = pattern must be found in the beginning of the line
				• $ = pattern must be found in the end of the line
				• [] = "OR" aka multiple patters (o or i)
				• [0-9] = "BETWEEN" (from 0 to 9)
				• [a-d]+ = "ONE OR MORE" (unlimited amount)
				• *t = "ZERO OR MORE" (character before "t")
				• ?t = "ZERO OR ONCE" (character before "t")
				• t[0-9]{4} = "EXACT AMOUNT" (four numbers after "t", no more no less)
				• t[^0-9]{4} = "ANYTHING BUT" (any four NON-numbers after "t", no more no less)
			//	• t([io])t\1 = "SAME AS FIRST" ("\1" search the same thing found inside the first parenthesis)

				• "/i" = "CASE INSENSITIVITY" (the "i" makes pattern search case insensitive)
				• "/m" = "MULTILINE" (the "\m" makes it search several lines)
					By default, PCRE treats the subject string as consisting of a single "line" of characters (even if it actually contains several newlines).
				• "/s" = "MULTILINE" (the "\m" makes it search several lines)

	• preg_match_all
			- returns number of found patterns in the string

• ===
	if (0 == "World") returns 1 because first comes number and it interprets the second as a number as well (characters are number 0)
	if (0 === "World") returns 0 because of an additional type check (number != character)
	
	$my_tab = array("zero", "one", "two");
	if (array_search("zero", $my_tab) !== FALSE)
		-> return the "key" on zero [0] which is 0 so without !== would be false
			 - key "0" (number 0) is not the same as boolean 0 (false)

_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

• EXTEND a class 	=> make a CHILD (which inherits all it's parent's attributes and methods)

• IMPLEMENT a class	=> make a specific INTERFACE for a class (interface = "header file" which holds the functions' prototypes - all have to be used)

		"Implement:"

		Interfaces are abstract classes, so you can only declare things. A class implements an interface. You can implement multiple interfaces.

		"Extend:"

		You extend classes when you want a more specific version of a class.

		"Example:"

		// Contract: a pet should play
		public interface Pet {
			public void play(); 
		}

		// An animal eats and sleeps
		class Animal {
			public void eat();
			public void sleep();
		}


		public class Camel extends Animal {

		}

		public class Dog extends Animal implements Pet {    
			public void play() {...}
		}
		=> Both Camel and Dog are animals, so they extend Animal class. But only the Dog is a specific kind of Animal that also can be a Pet


#############################################################################################################################################

SIMPLE REGEX:

Regex quick reference
[abc]		A single character: a, b or c
[^abc]		Any single character but a, b, or c
[a-z]		Any single character in the range a-z
[a-zA-Z]	Any single character in the range a-z or A-Z
^		Start of line
$		End of line
\A		Start of string
\z		End of string
.		Any single character
\s		Any whitespace character
\S		Any non-whitespace character
\d		Any digit
\D		Any non-digit
\w		Any word character (letter, number, underscore)
\W		Any non-word character
\b		Any word boundary character
(...)	Capture everything enclosed
(a|b)	a or b
a?		Zero or one of a
a*		Zero or more of a
a+		One or more of a
a{3}	Exactly 3 of a
a{3,}	3 or more of a
a{3,6}	Between 3 and 6 of a

options: i case insensitive m make dot match newlines x ignore whitespace in regex o perform #{...} substitutions only once

#############################################################################################################################################

COOKIE EXAMPLE:

DOMAIN		INCL.SUBDOMAINS		PATH	HTTPS ONLY		EXP.SINCE EPOCH		NAME	VALUE
localhost	FALSE				/		FALSE			1607774463			food	choucroute

#############################################################################################################################################

MySQL:

Connect via mamp:
• /goinfre/jraty/mamp/mysql/bin
• ./mysql -uroot -p
	-> Enter password: (kuukkelinmuna)

Install:
	• brew install mysql
	• brew services start mysql

Connect:
	• mysql -uroot
 
Commands end with semicolon (;)
Exit:	Ctrl+D
Help:	mysql> \h

Execute a file containing SQL queries:
	mysql> source /Users/jraty/_PHP_piscine/Day05/ex01/ex01.sql;

• show databases;
• show tables;
• show columns from ft_table;

_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

We've installed your MySQL database without a root password. To secure it run:
	mysql_secure_installation

MySQL is configured to only allow connections from localhost by default

To connect run:
	mysql -uroot

To have launchd start mysql now and restart at login:
	brew services start mysql
Or, if you don't want/need a background service you can just run:
	mysql.server start

#############################################################################################################################################

JAVASCRIPT:

DOM:

> var my_element = document.getElementById('lga');			// manipulation of DOM (www.google.fr)
< "undefined"
> my_element.getAttribute('id');
< "lga"
> var new_element = document.createElement('span');
< "undefined"
> new_element.setAttribute('style', 'background: red;');
< "undefined"
> var_text = document.createTextNode('hello world');
< "hello world"
> new_element.appendChild(var_text);
< "hello world"
> my_element.appendChild(new_element);
< "<span style="background: red;">hello world</span>"
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

> my_element.removeChild(new_element);						// remove the created element
< "<span style="background: red;">hello world</span>"

#############################################################################################################################################

USEFUL COMMANDS:

⌘+K V:	open live preview inside VSC
"right click" on code -> Open with Live Server (open preview in Chrome)


⌘+K+C:	comment a line
⌘+K+U:	uncomment a line

⇧+⌘+X:	extensions

#############################################################################################################################################
